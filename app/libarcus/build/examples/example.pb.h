// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: example.proto

#ifndef PROTOBUF_example_2eproto__INCLUDED
#define PROTOBUF_example_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace Example {
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class ObjectList;
class ObjectListDefaultTypeInternal;
extern ObjectListDefaultTypeInternal _ObjectList_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class ProgressUpdate;
class ProgressUpdateDefaultTypeInternal;
extern ProgressUpdateDefaultTypeInternal _ProgressUpdate_default_instance_;
class SlicedObject;
class SlicedObjectDefaultTypeInternal;
extern SlicedObjectDefaultTypeInternal _SlicedObject_default_instance_;
class SlicedObjectList;
class SlicedObjectListDefaultTypeInternal;
extern SlicedObjectListDefaultTypeInternal _SlicedObjectList_default_instance_;
}  // namespace Example

namespace Example {

namespace protobuf_example_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_example_2eproto

enum Polygon_Type {
  Polygon_Type_InnerType = 0,
  Polygon_Type_OuterType = 1,
  Polygon_Type_Polygon_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Polygon_Type_Polygon_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Polygon_Type_IsValid(int value);
const Polygon_Type Polygon_Type_Type_MIN = Polygon_Type_InnerType;
const Polygon_Type Polygon_Type_Type_MAX = Polygon_Type_OuterType;
const int Polygon_Type_Type_ARRAYSIZE = Polygon_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Polygon_Type_descriptor();
inline const ::std::string& Polygon_Type_Name(Polygon_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Polygon_Type_descriptor(), value);
}
inline bool Polygon_Type_Parse(
    const ::std::string& name, Polygon_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Polygon_Type>(
    Polygon_Type_descriptor(), name, value);
}
// ===================================================================

class ObjectList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Example.ObjectList) */ {
 public:
  ObjectList();
  virtual ~ObjectList();

  ObjectList(const ObjectList& from);

  inline ObjectList& operator=(const ObjectList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ObjectList(ObjectList&& from) noexcept
    : ObjectList() {
    *this = ::std::move(from);
  }

  inline ObjectList& operator=(ObjectList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectList& default_instance();

  static inline const ObjectList* internal_default_instance() {
    return reinterpret_cast<const ObjectList*>(
               &_ObjectList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ObjectList* other);
  friend void swap(ObjectList& a, ObjectList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ObjectList* New() const PROTOBUF_FINAL { return New(NULL); }

  ObjectList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ObjectList& from);
  void MergeFrom(const ObjectList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ObjectList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Example.Object objects = 1;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 1;
  const ::Example::Object& objects(int index) const;
  ::Example::Object* mutable_objects(int index);
  ::Example::Object* add_objects();
  ::google::protobuf::RepeatedPtrField< ::Example::Object >*
      mutable_objects();
  const ::google::protobuf::RepeatedPtrField< ::Example::Object >&
      objects() const;

  // @@protoc_insertion_point(class_scope:Example.ObjectList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Example::Object > objects_;
  mutable int _cached_size_;
  friend struct protobuf_example_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Object : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Example.Object) */ {
 public:
  Object();
  virtual ~Object();

  Object(const Object& from);

  inline Object& operator=(const Object& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Object(Object&& from) noexcept
    : Object() {
    *this = ::std::move(from);
  }

  inline Object& operator=(Object&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Object& default_instance();

  static inline const Object* internal_default_instance() {
    return reinterpret_cast<const Object*>(
               &_Object_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Object* other);
  friend void swap(Object& a, Object& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Object* New() const PROTOBUF_FINAL { return New(NULL); }

  Object* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Object& from);
  void MergeFrom(const Object& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Object* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes vertices = 2;
  void clear_vertices();
  static const int kVerticesFieldNumber = 2;
  const ::std::string& vertices() const;
  void set_vertices(const ::std::string& value);
  #if LANG_CXX11
  void set_vertices(::std::string&& value);
  #endif
  void set_vertices(const char* value);
  void set_vertices(const void* value, size_t size);
  ::std::string* mutable_vertices();
  ::std::string* release_vertices();
  void set_allocated_vertices(::std::string* vertices);

  // bytes normals = 3;
  void clear_normals();
  static const int kNormalsFieldNumber = 3;
  const ::std::string& normals() const;
  void set_normals(const ::std::string& value);
  #if LANG_CXX11
  void set_normals(::std::string&& value);
  #endif
  void set_normals(const char* value);
  void set_normals(const void* value, size_t size);
  ::std::string* mutable_normals();
  ::std::string* release_normals();
  void set_allocated_normals(::std::string* normals);

  // bytes indices = 4;
  void clear_indices();
  static const int kIndicesFieldNumber = 4;
  const ::std::string& indices() const;
  void set_indices(const ::std::string& value);
  #if LANG_CXX11
  void set_indices(::std::string&& value);
  #endif
  void set_indices(const char* value);
  void set_indices(const void* value, size_t size);
  ::std::string* mutable_indices();
  ::std::string* release_indices();
  void set_allocated_indices(::std::string* indices);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Example.Object)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vertices_;
  ::google::protobuf::internal::ArenaStringPtr normals_;
  ::google::protobuf::internal::ArenaStringPtr indices_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct protobuf_example_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ProgressUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Example.ProgressUpdate) */ {
 public:
  ProgressUpdate();
  virtual ~ProgressUpdate();

  ProgressUpdate(const ProgressUpdate& from);

  inline ProgressUpdate& operator=(const ProgressUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProgressUpdate(ProgressUpdate&& from) noexcept
    : ProgressUpdate() {
    *this = ::std::move(from);
  }

  inline ProgressUpdate& operator=(ProgressUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ProgressUpdate& default_instance();

  static inline const ProgressUpdate* internal_default_instance() {
    return reinterpret_cast<const ProgressUpdate*>(
               &_ProgressUpdate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ProgressUpdate* other);
  friend void swap(ProgressUpdate& a, ProgressUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProgressUpdate* New() const PROTOBUF_FINAL { return New(NULL); }

  ProgressUpdate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ProgressUpdate& from);
  void MergeFrom(const ProgressUpdate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ProgressUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 objectId = 1;
  void clear_objectid();
  static const int kObjectIdFieldNumber = 1;
  ::google::protobuf::int32 objectid() const;
  void set_objectid(::google::protobuf::int32 value);

  // int32 amount = 2;
  void clear_amount();
  static const int kAmountFieldNumber = 2;
  ::google::protobuf::int32 amount() const;
  void set_amount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Example.ProgressUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 objectid_;
  ::google::protobuf::int32 amount_;
  mutable int _cached_size_;
  friend struct protobuf_example_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SlicedObjectList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Example.SlicedObjectList) */ {
 public:
  SlicedObjectList();
  virtual ~SlicedObjectList();

  SlicedObjectList(const SlicedObjectList& from);

  inline SlicedObjectList& operator=(const SlicedObjectList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SlicedObjectList(SlicedObjectList&& from) noexcept
    : SlicedObjectList() {
    *this = ::std::move(from);
  }

  inline SlicedObjectList& operator=(SlicedObjectList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SlicedObjectList& default_instance();

  static inline const SlicedObjectList* internal_default_instance() {
    return reinterpret_cast<const SlicedObjectList*>(
               &_SlicedObjectList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SlicedObjectList* other);
  friend void swap(SlicedObjectList& a, SlicedObjectList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SlicedObjectList* New() const PROTOBUF_FINAL { return New(NULL); }

  SlicedObjectList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SlicedObjectList& from);
  void MergeFrom(const SlicedObjectList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SlicedObjectList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Example.SlicedObject objects = 1;
  int objects_size() const;
  void clear_objects();
  static const int kObjectsFieldNumber = 1;
  const ::Example::SlicedObject& objects(int index) const;
  ::Example::SlicedObject* mutable_objects(int index);
  ::Example::SlicedObject* add_objects();
  ::google::protobuf::RepeatedPtrField< ::Example::SlicedObject >*
      mutable_objects();
  const ::google::protobuf::RepeatedPtrField< ::Example::SlicedObject >&
      objects() const;

  // @@protoc_insertion_point(class_scope:Example.SlicedObjectList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Example::SlicedObject > objects_;
  mutable int _cached_size_;
  friend struct protobuf_example_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SlicedObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Example.SlicedObject) */ {
 public:
  SlicedObject();
  virtual ~SlicedObject();

  SlicedObject(const SlicedObject& from);

  inline SlicedObject& operator=(const SlicedObject& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SlicedObject(SlicedObject&& from) noexcept
    : SlicedObject() {
    *this = ::std::move(from);
  }

  inline SlicedObject& operator=(SlicedObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SlicedObject& default_instance();

  static inline const SlicedObject* internal_default_instance() {
    return reinterpret_cast<const SlicedObject*>(
               &_SlicedObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SlicedObject* other);
  friend void swap(SlicedObject& a, SlicedObject& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SlicedObject* New() const PROTOBUF_FINAL { return New(NULL); }

  SlicedObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SlicedObject& from);
  void MergeFrom(const SlicedObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SlicedObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Example.Polygon polygons = 2;
  int polygons_size() const;
  void clear_polygons();
  static const int kPolygonsFieldNumber = 2;
  const ::Example::Polygon& polygons(int index) const;
  ::Example::Polygon* mutable_polygons(int index);
  ::Example::Polygon* add_polygons();
  ::google::protobuf::RepeatedPtrField< ::Example::Polygon >*
      mutable_polygons();
  const ::google::protobuf::RepeatedPtrField< ::Example::Polygon >&
      polygons() const;

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Example.SlicedObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Example::Polygon > polygons_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct protobuf_example_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Polygon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Example.Polygon) */ {
 public:
  Polygon();
  virtual ~Polygon();

  Polygon(const Polygon& from);

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Polygon& default_instance();

  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Polygon* other);
  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const PROTOBUF_FINAL { return New(NULL); }

  Polygon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Polygon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Polygon_Type Type;
  static const Type InnerType =
    Polygon_Type_InnerType;
  static const Type OuterType =
    Polygon_Type_OuterType;
  static inline bool Type_IsValid(int value) {
    return Polygon_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Polygon_Type_Type_MIN;
  static const Type Type_MAX =
    Polygon_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Polygon_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Polygon_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Polygon_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Polygon_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes points = 2;
  void clear_points();
  static const int kPointsFieldNumber = 2;
  const ::std::string& points() const;
  void set_points(const ::std::string& value);
  #if LANG_CXX11
  void set_points(::std::string&& value);
  #endif
  void set_points(const char* value);
  void set_points(const void* value, size_t size);
  ::std::string* mutable_points();
  ::std::string* release_points();
  void set_allocated_points(::std::string* points);

  // .Example.Polygon.Type type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Example::Polygon_Type type() const;
  void set_type(::Example::Polygon_Type value);

  // @@protoc_insertion_point(class_scope:Example.Polygon)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr points_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_example_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObjectList

// repeated .Example.Object objects = 1;
inline int ObjectList::objects_size() const {
  return objects_.size();
}
inline void ObjectList::clear_objects() {
  objects_.Clear();
}
inline const ::Example::Object& ObjectList::objects(int index) const {
  // @@protoc_insertion_point(field_get:Example.ObjectList.objects)
  return objects_.Get(index);
}
inline ::Example::Object* ObjectList::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:Example.ObjectList.objects)
  return objects_.Mutable(index);
}
inline ::Example::Object* ObjectList::add_objects() {
  // @@protoc_insertion_point(field_add:Example.ObjectList.objects)
  return objects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Example::Object >*
ObjectList::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:Example.ObjectList.objects)
  return &objects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Example::Object >&
ObjectList::objects() const {
  // @@protoc_insertion_point(field_list:Example.ObjectList.objects)
  return objects_;
}

// -------------------------------------------------------------------

// Object

// int32 id = 1;
inline void Object::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Object::id() const {
  // @@protoc_insertion_point(field_get:Example.Object.id)
  return id_;
}
inline void Object::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Example.Object.id)
}

// bytes vertices = 2;
inline void Object::clear_vertices() {
  vertices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::vertices() const {
  // @@protoc_insertion_point(field_get:Example.Object.vertices)
  return vertices_.GetNoArena();
}
inline void Object::set_vertices(const ::std::string& value) {
  
  vertices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Example.Object.vertices)
}
#if LANG_CXX11
inline void Object::set_vertices(::std::string&& value) {
  
  vertices_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Example.Object.vertices)
}
#endif
inline void Object::set_vertices(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  vertices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Example.Object.vertices)
}
inline void Object::set_vertices(const void* value, size_t size) {
  
  vertices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Example.Object.vertices)
}
inline ::std::string* Object::mutable_vertices() {
  
  // @@protoc_insertion_point(field_mutable:Example.Object.vertices)
  return vertices_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_vertices() {
  // @@protoc_insertion_point(field_release:Example.Object.vertices)
  
  return vertices_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_vertices(::std::string* vertices) {
  if (vertices != NULL) {
    
  } else {
    
  }
  vertices_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vertices);
  // @@protoc_insertion_point(field_set_allocated:Example.Object.vertices)
}

// bytes normals = 3;
inline void Object::clear_normals() {
  normals_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::normals() const {
  // @@protoc_insertion_point(field_get:Example.Object.normals)
  return normals_.GetNoArena();
}
inline void Object::set_normals(const ::std::string& value) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Example.Object.normals)
}
#if LANG_CXX11
inline void Object::set_normals(::std::string&& value) {
  
  normals_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Example.Object.normals)
}
#endif
inline void Object::set_normals(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Example.Object.normals)
}
inline void Object::set_normals(const void* value, size_t size) {
  
  normals_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Example.Object.normals)
}
inline ::std::string* Object::mutable_normals() {
  
  // @@protoc_insertion_point(field_mutable:Example.Object.normals)
  return normals_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_normals() {
  // @@protoc_insertion_point(field_release:Example.Object.normals)
  
  return normals_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_normals(::std::string* normals) {
  if (normals != NULL) {
    
  } else {
    
  }
  normals_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normals);
  // @@protoc_insertion_point(field_set_allocated:Example.Object.normals)
}

// bytes indices = 4;
inline void Object::clear_indices() {
  indices_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::indices() const {
  // @@protoc_insertion_point(field_get:Example.Object.indices)
  return indices_.GetNoArena();
}
inline void Object::set_indices(const ::std::string& value) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Example.Object.indices)
}
#if LANG_CXX11
inline void Object::set_indices(::std::string&& value) {
  
  indices_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Example.Object.indices)
}
#endif
inline void Object::set_indices(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Example.Object.indices)
}
inline void Object::set_indices(const void* value, size_t size) {
  
  indices_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Example.Object.indices)
}
inline ::std::string* Object::mutable_indices() {
  
  // @@protoc_insertion_point(field_mutable:Example.Object.indices)
  return indices_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_indices() {
  // @@protoc_insertion_point(field_release:Example.Object.indices)
  
  return indices_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_indices(::std::string* indices) {
  if (indices != NULL) {
    
  } else {
    
  }
  indices_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), indices);
  // @@protoc_insertion_point(field_set_allocated:Example.Object.indices)
}

// -------------------------------------------------------------------

// ProgressUpdate

// int32 objectId = 1;
inline void ProgressUpdate::clear_objectid() {
  objectid_ = 0;
}
inline ::google::protobuf::int32 ProgressUpdate::objectid() const {
  // @@protoc_insertion_point(field_get:Example.ProgressUpdate.objectId)
  return objectid_;
}
inline void ProgressUpdate::set_objectid(::google::protobuf::int32 value) {
  
  objectid_ = value;
  // @@protoc_insertion_point(field_set:Example.ProgressUpdate.objectId)
}

// int32 amount = 2;
inline void ProgressUpdate::clear_amount() {
  amount_ = 0;
}
inline ::google::protobuf::int32 ProgressUpdate::amount() const {
  // @@protoc_insertion_point(field_get:Example.ProgressUpdate.amount)
  return amount_;
}
inline void ProgressUpdate::set_amount(::google::protobuf::int32 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:Example.ProgressUpdate.amount)
}

// -------------------------------------------------------------------

// SlicedObjectList

// repeated .Example.SlicedObject objects = 1;
inline int SlicedObjectList::objects_size() const {
  return objects_.size();
}
inline void SlicedObjectList::clear_objects() {
  objects_.Clear();
}
inline const ::Example::SlicedObject& SlicedObjectList::objects(int index) const {
  // @@protoc_insertion_point(field_get:Example.SlicedObjectList.objects)
  return objects_.Get(index);
}
inline ::Example::SlicedObject* SlicedObjectList::mutable_objects(int index) {
  // @@protoc_insertion_point(field_mutable:Example.SlicedObjectList.objects)
  return objects_.Mutable(index);
}
inline ::Example::SlicedObject* SlicedObjectList::add_objects() {
  // @@protoc_insertion_point(field_add:Example.SlicedObjectList.objects)
  return objects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Example::SlicedObject >*
SlicedObjectList::mutable_objects() {
  // @@protoc_insertion_point(field_mutable_list:Example.SlicedObjectList.objects)
  return &objects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Example::SlicedObject >&
SlicedObjectList::objects() const {
  // @@protoc_insertion_point(field_list:Example.SlicedObjectList.objects)
  return objects_;
}

// -------------------------------------------------------------------

// SlicedObject

// int32 id = 1;
inline void SlicedObject::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 SlicedObject::id() const {
  // @@protoc_insertion_point(field_get:Example.SlicedObject.id)
  return id_;
}
inline void SlicedObject::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Example.SlicedObject.id)
}

// repeated .Example.Polygon polygons = 2;
inline int SlicedObject::polygons_size() const {
  return polygons_.size();
}
inline void SlicedObject::clear_polygons() {
  polygons_.Clear();
}
inline const ::Example::Polygon& SlicedObject::polygons(int index) const {
  // @@protoc_insertion_point(field_get:Example.SlicedObject.polygons)
  return polygons_.Get(index);
}
inline ::Example::Polygon* SlicedObject::mutable_polygons(int index) {
  // @@protoc_insertion_point(field_mutable:Example.SlicedObject.polygons)
  return polygons_.Mutable(index);
}
inline ::Example::Polygon* SlicedObject::add_polygons() {
  // @@protoc_insertion_point(field_add:Example.SlicedObject.polygons)
  return polygons_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Example::Polygon >*
SlicedObject::mutable_polygons() {
  // @@protoc_insertion_point(field_mutable_list:Example.SlicedObject.polygons)
  return &polygons_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Example::Polygon >&
SlicedObject::polygons() const {
  // @@protoc_insertion_point(field_list:Example.SlicedObject.polygons)
  return polygons_;
}

// -------------------------------------------------------------------

// Polygon

// .Example.Polygon.Type type = 1;
inline void Polygon::clear_type() {
  type_ = 0;
}
inline ::Example::Polygon_Type Polygon::type() const {
  // @@protoc_insertion_point(field_get:Example.Polygon.type)
  return static_cast< ::Example::Polygon_Type >(type_);
}
inline void Polygon::set_type(::Example::Polygon_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Example.Polygon.type)
}

// bytes points = 2;
inline void Polygon::clear_points() {
  points_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Polygon::points() const {
  // @@protoc_insertion_point(field_get:Example.Polygon.points)
  return points_.GetNoArena();
}
inline void Polygon::set_points(const ::std::string& value) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Example.Polygon.points)
}
#if LANG_CXX11
inline void Polygon::set_points(::std::string&& value) {
  
  points_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Example.Polygon.points)
}
#endif
inline void Polygon::set_points(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Example.Polygon.points)
}
inline void Polygon::set_points(const void* value, size_t size) {
  
  points_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Example.Polygon.points)
}
inline ::std::string* Polygon::mutable_points() {
  
  // @@protoc_insertion_point(field_mutable:Example.Polygon.points)
  return points_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Polygon::release_points() {
  // @@protoc_insertion_point(field_release:Example.Polygon.points)
  
  return points_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Polygon::set_allocated_points(::std::string* points) {
  if (points != NULL) {
    
  } else {
    
  }
  points_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), points);
  // @@protoc_insertion_point(field_set_allocated:Example.Polygon.points)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Example

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Example::Polygon_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Example::Polygon_Type>() {
  return ::Example::Polygon_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_example_2eproto__INCLUDED
